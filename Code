Link data
https://drive.google.com/drive/folders/1TxrWRhy54l64uLOPcuTshJNQzYoYQsLz?usp=sharing
Link colab
https://colab.research.google.com/drive/1lIcGHOkGt9gg1J_sejPxzLnWv-hTAc61?usp=sharing


# đặt biến lưu đường dẫn đến folder lưu data
train_folder = '/content/drive/MyDrive/data_CuoiKy/train'
valid_folder = '/content/drive/MyDrive/data_CuoiKy/validation'

# khai báo thư viện
from keras.models import Sequential
from keras.layers import Dense, Activation, Conv2D, Flatten, MaxPooling2D
from tensorflow.keras.optimizers import RMSprop, SGD
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# xử lý dữ liệu
train_g = ImageDataGenerator(rescale=1/255)
valid_g = ImageDataGenerator(rescale=1/255)

# đánh nhãn
g_train_data = train_g.flow_from_directory(
    train_folder,
    target_size = (250,250),
    batch_size = 128,
    class_mode = 'categorical'
)
g_valid_data = valid_g.flow_from_directory(
    valid_folder,
    target_size = (250,250),
    batch_size = 128,
    class_mode = 'categorical'
)

# tạo model
model = Sequential()
model.add(Conv2D(32,(3,3),activation='relu',kernel_initializer='he_uniform',padding='same',input_shape=(250,250,3)))
model.add(MaxPooling2D((2,2)))
model.add(Conv2D(64,(3, 3),activation='relu',kernel_initializer='he_uniform',padding='same'))
model.add(MaxPooling2D((2,2)))
model.add(Conv2D(128,(3, 3),activation='relu',kernel_initializer='he_uniform',padding='same'))
model.add(MaxPooling2D((2,2)))
model.add(Flatten())
model.add(Dense(512,activation='relu',kernel_initializer='he_uniform'))
model.add(Dense(4,activation='softmax'))
model.summary()
opt= SGD(lr=0.01, momentum=0.9)
model.compile(optimizer=opt, loss='categorical_crossentropy', metrics=['accuracy'])

#training
history=model.fit(
    g_train_data,
    batch_size=128,
    epochs=100,
    verbose=1,
    validation_data=g_valid_data
)

# lưu model
model.save('cuoi_ky.h5')

# load model
from keras.models import load_model
model5 = load_model('/content/drive/MyDrive/cuoi_ky.h5')

# Vẽ đồ thị val_accuracy and val_loss
import numpy as np
from google.colab import files
from keras.preprocessing import image
import matplotlib.pyplot as plt

plt.title('val_accuracy and val_loss')
plt.plot(history.history['val_accuracy'])
plt.plot(history.history['val_loss'])
plt.xlabel('epoch')
plt.legend(['val_accuracy','val_loss'])
plt.show()

classes = ["XoayLen","XoayPhai","XoayTrai","XoayXuong"]

uploaded = files.upload();
for fn in uploaded.keys():
  path = './' + fn
  img = image.load_img(path, target_size=(250,250))
  plt.imshow(img)
  img = image.img_to_array(img)/255
  img = img.reshape(1,250,250,3)
  img = img.astype('float32')
  img = np.vstack([img])
  pred = model.predict(img, batch_size=10)
  print(pred)
  y_classes = [np.argmax(element) for element in pred]
  #print(y_classes)
  plt.title(f'Recognized as {classes[y_classes[0]]}',color='red')
  plt.show()
